name: CI

on:
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        feature: [sqlite, postgres]
      fail-fast: false
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: actions-rust-lang/setup-rust-toolchain@9d7e65c320fdb52dcd45ffaa68deb6c02c8754d9
        with:
          override: true
          components: rustfmt, clippy
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/${{ env.BUILD_PROFILE }}
          key: ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libpq-dev
      - name: Export POSTGRES_TEST_URL
        if: matrix.feature == 'postgres'
        uses: ./.github/actions/export-postgres-url
        with:
          url: postgres://postgres:password@localhost/test
      - name: Format
        run: cargo fmt --all -- --check
      - name: Lint
        run: cargo clippy --no-default-features --features ${{ matrix.feature }} -- -D warnings
      - name: Test
        run: cargo test --no-default-features --features ${{ matrix.feature }}

  coverage:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      CARGO_TERM_COLOR: always
      CODESCENE_CLI_SHA256: "a1c38415c5978908283c0608b648b27e954c93882b15d8b91d052d846c3eabd8"
    steps:
      - uses: actions/checkout@v4
      - name: Install rust
        uses: actions-rust-lang/setup-rust-toolchain@9d7e65c320fdb52dcd45ffaa68deb6c02c8754d9
        with:
          override: true
          components: rustfmt, clippy
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/${{ env.BUILD_PROFILE }}
          key: ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      - uses: oven-sh/setup-bun@v2
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends libpq-dev
      - uses: ./.github/actions/export-postgres-url
        with:
          url: postgres://postgres:password@localhost/test
      - name: Generate coverage for SQLite
        run: |
          cargo llvm-cov --workspace --features sqlite --lcov --output-path lcov-sqlite.info
      - name: Generate coverage for Postgres
        run: |
          cargo llvm-cov --workspace --no-default-features --features postgres --lcov --output-path lcov-postgres.info
      - name: Merge coverage results
        run: bun x lcov-result-merger lcov-sqlite.info lcov-postgres.info > lcov.info
      - name: Install CodeScene coverage tool
        run: |
          set -euo pipefail
          curl -fsSL -o install-cs-coverage-tool.sh https://downloads.codescene.io/enterprise/cli/install-cs-coverage-tool.sh
          echo "${CODESCENE_CLI_SHA256}  install-cs-coverage-tool.sh" | sha256sum -c -
          bash install-cs-coverage-tool.sh -y
          rm install-cs-coverage-tool.sh
      - name: Upload coverage data to CodeScene
        run: cs-coverage upload --format "lcov" --metric "line-coverage" "lcov.info"
        env:
          CS_ACCESS_TOKEN: ${{ secrets.CS_ACCESS_TOKEN }}
