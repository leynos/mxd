name: CI

on:
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        feature: [sqlite, postgres]
      fail-fast: false
    env:
      CARGO_TERM_COLOR: always
      BUILD_PROFILE: debug
    steps:
      - uses: actions/checkout@v4
      - uses: leynos/shared-actions/.github/actions/setup-rust@v1
        with:
          install-postgres-deps: ${{ matrix.feature == 'postgres' }}
      - name: Export POSTGRES_TEST_URL
        if: matrix.feature == 'postgres'
        uses: ./.github/actions/export-postgres-url
        with:
          url: postgres://postgres:password@localhost/test
      - name: Format
        run: cargo fmt --all -- --check
      - name: Lint
        run: cargo clippy --no-default-features --features ${{ matrix.feature }} -- -D warnings
      - name: Test
        run: cargo test --no-default-features --features ${{ matrix.feature }}

  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        feature: [sqlite]
      fail-fast: false
    env:
      CARGO_TERM_COLOR: always
      BUILD_PROFILE: debug
    steps:
      - uses: actions/checkout@v4
      - uses: leynos/shared-actions/.github/actions/setup-rust@v1
      - name: Add Windows GNU target
        run: rustup target add x86_64-pc-windows-gnu
      - name: Format
        run: cargo fmt --all -- --check
      - name: Lint
        run: cargo clippy --no-default-features --features ${{ matrix.feature }} -- -D warnings
      - name: Build for Windows GNU
        run: cargo build --target x86_64-pc-windows-gnu --no-default-features --features ${{ matrix.feature }}
      - name: Test for Windows GNU
        run: cargo test --target x86_64-pc-windows-gnu --no-default-features --features ${{ matrix.feature }}

  coverage:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      CARGO_TERM_COLOR: always
      CODESCENE_CLI_SHA256: "a1c38415c5978908283c0608b648b27e954c93882b15d8b91d052d846c3eabd8"
      BUILD_PROFILE: debug
    steps:
      - uses: actions/checkout@v4
      - uses: leynos/shared-actions/.github/actions/setup-rust@v1
        with:
          install-postgres-deps: true
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      - uses: oven-sh/setup-bun@v2
      - uses: ./.github/actions/export-postgres-url
        with:
          url: postgres://postgres:password@localhost/test
      - name: Generate coverage for SQLite
        uses: ./.github/actions/generate-coverage
        with:
          features: sqlite
          output-path: lcov-sqlite.info
      - name: Generate coverage for Postgres
        uses: ./.github/actions/generate-coverage
        with:
          with-default-features: false
          features: postgres
          output-path: lcov-postgres.info
      - name: Merge coverage results
        run: bun x lcov-result-merger lcov-sqlite.info lcov-postgres.info > lcov.info
      - name: Upload coverage data to CodeScene
        uses: leynos/shared-actions/.github/actions/upload-codescene-coverage@v1
        with:
          path: lcov.info
          format: lcov
        env:
          CS_ACCESS_TOKEN: ${{ secrets.CS_ACCESS_TOKEN }}
          CODESCENE_CLI_SHA256: ${{ env.CODESCENE_CLI_SHA256 }}
